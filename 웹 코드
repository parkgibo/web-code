<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>모험형 주사위 게임</title>
  <style>
    body { font-family: Arial, sans-serif; display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; margin: 0; }
    .game-board { display: grid; grid-template-columns: repeat(5, 100px); gap: 5px; margin-bottom: 20px; }
    .tile { width: 100px; height: 100px; display: flex; justify-content: center; align-items: center; background-color: #c8e6c9; border: 2px solid #8bc34a; border-radius: 10px; font-weight: bold; font-size: 1.2em; color: #333; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2); }
    .monster { background-color: #e53935; color: white; }
    .event { background-color: #ffeb3b; color: white; }
    .current { background-color: black; color: white; }
    #dice, #use-item-btn { padding: 10px 20px; font-size: 1.2em; font-weight: bold; border: none; cursor: pointer; border-radius: 5px; }
    #dice { background-color: #4CAF50; color: white; }
    #use-item-btn { display: none; background-color: #FF9800; color: white; margin-top: 10px; }
    #event-message, #battle-log { margin-top: 10px; font-size: 1em; }
    .battle-area { display: none; text-align: center; margin-top: 20px; }
    .card { display: inline-block; width: 100px; padding: 10px; margin: 5px; border: 1px solid #333; border-radius: 8px; background-color: #f5f5f5; text-align: center; font-weight: bold; cursor: pointer; }
  </style>
</head>
<body>
  <h1>모험형 주사위 게임</h1>
  <button class="rules-btn" id="rules-btn">게임 규칙 보기</button>
  <div class="rules" id="rules">
    <h3>게임 규칙</h3>
    <ul>
      <li>주사위를 굴려 나온 숫자만큼 이동합니다.</li>
      <li>몬스터 타일에 도착하면 전투가 시작됩니다.</li>
      <li>이벤트 타일에서는 50% 확률로 아이템을 획득할 수 있습니다.</li>
      <li>아이템은 체력을 회복하는 데 사용할 수 있습니다.</li>
      <li>25번째 타일에 도착하면 게임에서 승리합니다.</li>
    </ul>
  </div>
  <div class="game-board" id="game-board"></div>
  <button id="dice">주사위 굴리기</button>
  <div id="event-message"></div>
  <div id="item-count">아이템 보유 개수: <span id="item-count-value">0</span></div>
  <div class="battle-area" id="battle-area">
    <div>플레이어 체력: <span id="player-health">20</span></div>
    <div>몬스터 체력: <span id="monster-health">20</span></div>
    <h2>카드를 선택하세요:</h2>
    <div id="player-cards"></div>
    <div id="battle-log">전투 로그</div>
  </div>
  <button id="use-item-btn">아이템 사용</button>
  <script>
    const boardSize = 25, monsterProbability = 0.3, eventProbability = 0.2;
    let playerPos = 0, playerHealth = 20, monsterHealth = 15, itemCount = 0, isPlayerTurn = true, isDiceActive = true;
    const playerDeck = [
      { name: "공격", minDamage: 3, maxDamage: 7, type: "attack" },
      { name: "기습", minDamage: 1, maxDamage: 12, type: "surprise" },
      { name: "파이어볼", minDamage: 4, maxDamage: 8, type: "attack" },
      { name: "힐", minHeal: 3, maxHeal: 10, type: "heal" }
    ];
    const enemyDeck = [
      { name: "공격", minDamage: 3, maxDamage: 7, type: "attack" },
      { name: "기습", minDamage: 1, maxDamage: 10, type: "surprise" },
      { name: "깨물다", minDamage: 4, maxDamage: 8, type: "attack" },
      { name: "자연치유", minHeal: 3, maxHeal: 7, type: "heal" }
    ];
    document.addEventListener("DOMContentLoaded", () => {
      const rulesBtn = document.getElementById("rules-btn");
      const rules = document.getElementById("rules");

      // 게임 규칙 보기/닫기 버튼 동작
      rulesBtn.addEventListener("click", () => {
        if (rules.style.display === "block") {
          rules.style.display = "none";
          rulesBtn.textContent = "게임 규칙 보기";
        } else {
          rules.style.display = "block";
          rulesBtn.textContent = "게임 규칙 닫기";
        }
      });
    });
    const board = document.getElementById("game-board"),
          playerCardsDiv = document.getElementById("player-cards"),
          battleLog = document.getElementById("battle-log"),
          battleArea = document.getElementById("battle-area"),
          itemCountValue = document.getElementById("item-count-value");
    const getRandomInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
    const createBoard = () => {
      board.innerHTML = '';
      for (let i = 0; i < boardSize; i++) {
        const tile = document.createElement("div");
        tile.className = "tile";
        tile.innerText = i + 1;
        if (Math.random() < monsterProbability) tile.classList.add("monster");
        else if (Math.random() < monsterProbability + eventProbability) tile.classList.add("event");
        board.appendChild(tile);
      }
      updatePlayerPosition(0);
    };
    const updatePlayerPosition = (newPos) => {
      const tiles = document.querySelectorAll(".tile");
      tiles[playerPos].classList.remove("current");
      playerPos = newPos;
      tiles[playerPos].classList.add("current");
      checkTile(tiles[playerPos]);
    };
    document.getElementById("dice").onclick = () => {
      if (!isDiceActive) return;
      const steps = getRandomInRange(1, 6);
      document.getElementById("event-message").innerText = `주사위 결과: ${steps}`;
      const newPos = playerPos + steps;
      if (newPos >= boardSize) { alert("게임 승리!"); resetGame(); }
      else updatePlayerPosition(newPos);
    };
    const checkTile = (tile) => {
      if (tile.classList.contains("monster")) {
        document.getElementById("event-message").innerText = "몬스터를 만났습니다! 전투 시작!";
        startBattle();
      } else if (tile.classList.contains("event")) {
        document.getElementById("event-message").innerText = "이벤트 발생!";
        if (Math.random() < 0.5) {
          itemCount++; itemCountValue.innerText = itemCount;
          alert("아이템을 얻었습니다!");
          document.getElementById("use-item-btn").style.display = "block";
        } else alert("이벤트에 참여했지만, 아이템을 얻지 못했습니다.");
      } else document.getElementById("event-message").innerText = "이동한 타일에 아무 일도 없습니다.";
    };
    const startBattle = () => {
      monsterHealth = 15;
      battleArea.style.display = "block";
      isDiceActive = false;
      isPlayerTurn = true;
      updateStats();
      renderPlayerCards();
    };
    const renderPlayerCards = () => {
      playerCardsDiv.innerHTML = "";
      playerDeck.forEach((card) => {
        const cardDiv = document.createElement("div");
        cardDiv.classList.add("card");
        cardDiv.innerText = `${card.name}\n(${card.type})`;
        cardDiv.onclick = () => playCard(card);
        playerCardsDiv.appendChild(cardDiv);
      });
    };
    const playCard = (card) => {
      if (!isPlayerTurn) return;
      processCardEffect(card, "player");
      isPlayerTurn = false;
      setTimeout(enemyTurn, 1000);
    };
    const enemyTurn = () => {
      if (monsterHealth <= 0 || playerHealth <= 0) return;
      const card = enemyDeck[Math.floor(Math.random() * enemyDeck.length)];
      processCardEffect(card, "enemy");
      isPlayerTurn = true;
      renderPlayerCards();
    };
    const processCardEffect = (card, user) => {
      const effectValue = card.type === "attack" || card.type === "surprise" ?
        getRandomInRange(card.minDamage, card.maxDamage) : getRandomInRange(card.minHeal, card.maxHeal);
      if (user === "player") {
        if (card.type === "heal") playerHealth += effectValue;
        else monsterHealth -= effectValue;
        logAction(`플레이어가 ${card.name}으로 ${card.type === "heal" ? `체력을 ${effectValue} 회복했습니다.` : `${effectValue}의 피해를 입혔습니다.`}`);
      } else {
        if (card.type === "heal") monsterHealth += effectValue;
        else playerHealth -= effectValue;
        logAction(`몬스터가 ${card.name}으로 ${card.type === "heal" ? `체력을 ${effectValue} 회복했습니다.` : `${effectValue}의 피해를 입혔습니다.`}`);
      }
      updateStats();
      checkBattleOutcome();
    };
    const updateStats = () => {
      document.getElementById("player-health").innerText = playerHealth;
      document.getElementById("monster-health").innerText = monsterHealth;
    };
    const logAction = (message) => { battleLog.innerText = message; };
    const checkBattleOutcome = () => {
      if (monsterHealth <= 0) { logAction("플레이어가 승리했습니다!"); endBattle(); }
      else if (playerHealth <= 0) { logAction("몬스터가 승리했습니다..."); resetGame(); }
    };
    const endBattle = () => {
      battleArea.style.display = "none";
      isDiceActive = true;
      isPlayerTurn = true;
      handlePostBattle();
    };
    const handlePostBattle = () => {
      if (Math.random() < 0.5) {
        itemCount++;
        itemCountValue.innerText = itemCount;
        alert("아이템을 얻었습니다!");
        document.getElementById("use-item-btn").style.display = "block";
      } else {
        playerHealth += 5;
        alert(`체력이 5만큼 회복되었습니다. 현재 체력: ${playerHealth}`);
      }
    };
    const resetGame = () => {
      playerPos = 0; playerHealth = 20; itemCount = 0;
      itemCountValue.innerText = itemCount;
      isDiceActive = true;
      document.getElementById("event-message").innerText = "";
      createBoard();
    };
    document.getElementById("use-item-btn").addEventListener("click", () => {
      if (itemCount > 0) {
        itemCount--; itemCountValue.innerText = itemCount;
        playerHealth += 10;
        alert(`아이템을 사용하여 체력이 20만큼 회복되었습니다. 현재 체력: ${playerHealth}`);
        updateStats();
      } else alert("아이템이 없습니다!");
    });
    createBoard();
  </script>
</body>
</html>
